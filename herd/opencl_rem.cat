OpenCL

(* A version of the OpenCL memory model 
   that includes remote scope promotion *)

let symm(r) = r | r^-1

(* Access modes *)
let mo_acq = memory_order_acquire 
let mo_rel = memory_order_release
let mo_acq_rel = memory_order_acq_rel
let mo_rlx = memory_order_relaxed 
let mo_sc = memory_order_seq_cst

(* Scope annotations *)
let s_wi = memory_scope_work_item 
let s_wg = memory_scope_work_group
let s_dev = memory_scope_device 
let s_all = memory_scope_all_svm_devices

(* Inclusive scopes *)

let incl1 = ([s_wi] ; wi)
	 | ([s_wg] ; wg)
	 | ([s_dev] ; dev)
	 | ([s_all] ; unv)

let incl = (incl1 & (incl1^-1))
	 | ([remote] ; incl1)
	 | ((incl1^-1) ; [remote])

(*******************)
(* Synchronisation *)
(*******************)

let acq = (mo_acq | mo_sc | mo_acq_rel) & (R | F | rmw)
let rel = (mo_rel | mo_sc | mo_acq_rel) & (W | F | rmw)

(* Release sequence *)
let rs = (_ * rmw) | wi
let max_co = co? & rs & ~((co & ~rs) ; co)

(* Including release-acquire fences *)
let from_rel = [rel]; ([F]; po)?; [A & W]
let to_acq = [A & R]; (po; [F])?; [acq]

(* Release-acquire synchronisation *)
let ra_sw(r) =
  incl & ~wi &
  ([r]; from_rel; max_co; [r]; rf; to_acq; [r])

(* Barrier synchronisation *)
let bar_sw(r) = (entry_fence * exit_fence) & same_B & ~wi & wg & r^2

(* Synchronisation on a region *)
let region_sw(r) = ra_sw(r) | bar_sw(r)

(* Allowed to synchronise on the other region *)
let scf = mo_sc^2 | (G & L & F)^2

(* Global and local synchronises-with *)
let gsw = region_sw(G) | (scf & region_sw(L))  
let lsw = region_sw(L) | (scf & region_sw(G)) 

(******************)
(* Happens-before *)
(******************)

(* Global and local happens-before *)
let ghb = (((G^2) & (po | (I * !I))) | gsw)+ 
let lhb = (((L^2) & (po | (I * !I))) | lsw)+ 
show ghb
show lhb
acyclic ghb as global_hb_acyclic
acyclic lhb as local_hb_acyclic

(* Per-location happens-before *)
let ghbl = ghb & loc 
let lhbl = lhb & loc 

(*************)
(* Coherence *)
(*************)

let coh(hb) = (rf^-1)?; co; rf?; hb
irreflexive coh(ghb)
irreflexive coh(lhb)

(************************)
(* Consistency of reads *)
(************************)

(* Visible side effects *)
let vse(hbl) = (W * R) & hbl & ~(hbl; [W]; hbl)
let gvse = [G]; vse(ghbl) 
let lvse = [L]; vse(lhbl)

(* A non-atomic load can only read from a store that is visible. *)
irreflexive rf; [nonatomicloc & G]; ~(gvse^-1)
irreflexive rf; [nonatomicloc & L]; ~(lvse^-1)

(* An atomic load can only read from a store that already happened. *)
irreflexive (ghb | lhb); rf; [A]

(* Consistency of RMWs *)
irreflexive rf | (fr;co) | (co;rf)

(**************************)
(* Sequential consistency *)
(**************************)

(* ifexists(s) = { 0    if s is empty
               { unv  otherwise      *)
let ifexists(s) = unv; [s]; unv

let sc1 = rf^-1; [mo_sc]; co 
let sc2 = [F]; po; co; po; [F]
let sc3 = [F]; po; fr; po; [F] 
let sc4 =          fr; po; [F] 
let sc5 = [F]; po; fr

let scp = (mo_sc^2) & (ghb | lhb | co | sc1 | sc2 | sc3 | sc4 | sc5)

let sc6 = rf^-1; (ghb | lhb); [W] 

show S

(* BEGIN PARTIAL SC STUFF *)
let scp' = scp & sc6
acyclic scp' & ifexists(mo_sc & !s_all) as S_exists
show scp' as scp
(* END PARTIAL SC STUFF *)

(*********)
(* Races *)
(*********)

let conflict = ((W * _) | (_ * W)) & loc

(* Data races *)
let dr = conflict & ~symm(ghb | lhb) & ~incl
undefined_unless empty dr as data_race
show dr

(* Unsequenced races *)
let ur = (wi & conflict & ~symm(po)) \ id 
undefined_unless empty ur as unsequenced_race
show ur

(* Barrier divergence *)
let bsw = bar_sw(G) | bar_sw(L)
let bd = [entry_fence] & ((~wi & wg); unv) \ (bsw ; unv)
undefined_unless empty bd as barrier_divergence
show bd
