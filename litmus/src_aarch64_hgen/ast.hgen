  | `AArch64AddSubCarry of reg*reg*reg*reg_size*boolean*boolean (* d,n,m,sf,sub_op,setflags *)
  | `AArch64AddSubExtendRegister of reg*reg*reg*reg_size*boolean*boolean*extendType*range0_7 (* d,n,m,sf,sub_op,setflags,extend_type,shift *)
  | `AArch64AddSubShiftedRegister of reg*reg*reg*reg_size*boolean*boolean*shiftType*range0_63 (* d,n,m,sf,sub_op,setflags,shift_type,shift_amount *)
  | `AArch64AddSubImmediate of reg*reg*reg_size*boolean*boolean*reg_size_int (* d,n,sf,sub_op,setflags,imm *)
  | `AArch64Address of reg*reg_size*boolean*bit64 (* d,sf,page,imm *)
  | `AArch64LogicalImmediate of reg*reg*reg_size*boolean*logicalOp*reg_size_int (* d,n,sf,setflags,op,imm *)
  | `AArch64LogicalShiftedRegister of reg*reg*reg*reg_size*boolean*logicalOp*shiftType*range0_63*boolean (* d,n,m,sf,setflags,op,shift_type,shift_amount,invert *)
  | `AArch64Shift of reg*reg*reg*reg_size*shiftType (* d,n,m,sf,shift_type *)
  | `AArch64BranchConditional of bit64*bit4 (* offset,condition *)
  | `AArch64BranchImmediate of branchType*bit64 (* _branch_type,offset *)
  | `AArch64BitfieldMove of reg*reg*reg_size*boolean*boolean*integer*integer*reg_size_int*reg_size_int (* d,n,sf,inzero,extend,R,S,wmask,tmask *)
  | `AArch64BranchRegister of reg*branchType (* n,_branch_type *)
  | `AArch64CompareAndBranch of reg*reg_size*boolean*bit64 (* t,sf,iszero,offset *)
  | `AArch64ConditionalCompareImmediate of reg*reg_size*boolean*bit4*bit4*reg_size_int (* n,sf,sub_op,condition,flags,imm *)
  | `AArch64ConditionalCompareRegister of reg*reg*reg_size*boolean*bit4*bit4 (* n,m,sf,sub_op,condition,flags *)
  | `AArch64ClearExclusiveMonitor of integer (* imm *)
  | `AArch64CountLeading of reg*reg*reg_size*countOp (* d,n,sf,opcode *)
  | `AArch64CRC of reg*reg*reg*reg_size*range8_64*boolean (* d,n,m,sf,size,crc32c *)
  | `AArch64ConditionalSelect of reg*reg*reg*reg_size*bit4*boolean*boolean (* d,n,m,sf,condition,else_inv,else_inc *)
  | `AArch64Barrier of memBarrierOp*mBReqDomain*mBReqTypes (* op,domain,types *)
  | `AArch64ExtractRegister of reg*reg*reg*reg_size*integer (* d,n,m,sf,lsb *)
  | `AArch64Hint of systemHintOp (* op *)
  | `AArch64LoadStoreAcqExc of reg*reg*reg*reg*accType*boolean*boolean*memOp*integer*reg_size*data_size*integer (* n,t,t2,s,acctype,excl,pair,memop,elsize,sf,df,datasize *)
  | `AArch64LoadStorePair of boolean*boolean*reg*reg*reg*accType*memOp*boolean*integer*reg_size*data_size*integer*bit64 (* wback,postindex,n,t,t2,acctype,memop,signed,scale,sf,df,datasize,offset *)
  | `AArch64LoadImediate of reg*reg*accType*memOp*boolean*boolean*boolean*bit64*reg_size*data_size*integer (* n,t,acctype,memop,signed,wback,postindex,offset,sf,df,datasize *)
  | `AArch64LoadLiteral of reg*memOp*boolean*reg_size*data_size*integer*bit64 (* t,memop,signed,sf,df,size,offset *)
  | `AArch64LoadRegister of reg*reg*reg*accType*memOp*boolean*boolean*boolean*extendType*integer*reg_size*data_size*integer (* n,t,m,acctype,memop,signed,wback,postindex,extend_type,shift,sf,df,datasize *)
  | `AArch64MultiplyAddSub of reg*reg*reg*reg*reg_size*boolean (* d,n,m,a,sf,sub_op *)
  | `AArch64MoveWide of reg*reg_size*bit16*integer*moveWideOp (* d,sf,imm,pos,opcode *)
  | `AArch64Reverse of reg*reg*reg_size*revOp (* d,n,sf,op *)
  | `AArch64Division of reg*reg*reg*reg_size*boolean (* d,n,m,sf,unsigned *)
  | `AArch64MultiplyAddSubLong of reg*reg*reg*reg*integer*integer*boolean*boolean (* d,n,m,a,destsize,datasize,sub_op,unsigned *)
  | `AArch64MultiplyHigh of reg*reg*reg*reg*reg_size*integer*integer*boolean (* d,n,m,a,sf,destsize,datasize,unsigned *)
  | `AArch64TestBitAndBranch of reg*reg_size*integer*bit*bit64 (* t,sf,bit_pos,bit_val,offset *)
